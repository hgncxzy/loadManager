apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        consumerProguardFiles 'consumer-rules.pro'
        multiDexEnabled true // 解决 API 21 以下系统 android test 方法数超出 64K 限制问题

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        checkOnly 'NewApi', 'InlinedApi'
        // If set to true, turns off analysis progress reporting by lint.
        quiet true
        // if set to true (default), stops the build if errors are found.
        abortOnError false
        // if true, only report errors.
        ignoreWarnings true
    }

    sourceSets {
        main {
            // 主要代码目录
            java.srcDirs += 'src/main/kotlin'
        }
        test {
            // 单元测试目录
            java.srcDirs += 'src/test/kotlin'
        }
        androidTest {
            // 仪表测试目录
            java.srcDirs += 'src/androidTest/kotlin'
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true // 开启单元测试覆盖率统计
            multiDexKeepProguard file('proguard-multidex-rules.pro') // 解决 API 21 以下系统 android test 方法数超出 64K 限制问题
        }
        snapshot {
            testCoverageEnabled false // 关闭单元测试覆盖率统计
        }
        release {
            testCoverageEnabled false // 关闭单元测试覆盖率统计
        }
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            def verName = buildConfig.version.name
            // 输出的文件按照该规则进行命名
            outputFileName = "load-manager-${variant.buildType.name}-${verName}.aar"
        }
    }
}
